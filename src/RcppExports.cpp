// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// willoughby_cpp
Rcpp::NumericVector willoughby_cpp(Rcpp::NumericVector r, const double rmw, const double msw, const double lat);
RcppExport SEXP _StormR_willoughby_cpp(SEXP rSEXP, SEXP rmwSEXP, SEXP mswSEXP, SEXP latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type rmw(rmwSEXP);
    Rcpp::traits::input_parameter< const double >::type msw(mswSEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    rcpp_result_gen = Rcpp::wrap(willoughby_cpp(r, rmw, msw, lat));
    return rcpp_result_gen;
END_RCPP
}
// holland_cpp
Rcpp::NumericVector holland_cpp(Rcpp::NumericVector r, const double rmw, const double msw, const double pc, const double poci, const double lat);
RcppExport SEXP _StormR_holland_cpp(SEXP rSEXP, SEXP rmwSEXP, SEXP mswSEXP, SEXP pcSEXP, SEXP pociSEXP, SEXP latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type rmw(rmwSEXP);
    Rcpp::traits::input_parameter< const double >::type msw(mswSEXP);
    Rcpp::traits::input_parameter< const double >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< const double >::type poci(pociSEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    rcpp_result_gen = Rcpp::wrap(holland_cpp(r, rmw, msw, pc, poci, lat));
    return rcpp_result_gen;
END_RCPP
}
// boose_cpp
Rcpp::NumericVector boose_cpp(Rcpp::NumericVector r, const double rmw, const double msw, const double pc, const double poci, Rcpp::NumericVector x, Rcpp::NumericVector y, const double vx, const double vy, const double vh, Rcpp::NumericVector landIntersect, const double lat);
RcppExport SEXP _StormR_boose_cpp(SEXP rSEXP, SEXP rmwSEXP, SEXP mswSEXP, SEXP pcSEXP, SEXP pociSEXP, SEXP xSEXP, SEXP ySEXP, SEXP vxSEXP, SEXP vySEXP, SEXP vhSEXP, SEXP landIntersectSEXP, SEXP latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type rmw(rmwSEXP);
    Rcpp::traits::input_parameter< const double >::type msw(mswSEXP);
    Rcpp::traits::input_parameter< const double >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< const double >::type poci(pociSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type vx(vxSEXP);
    Rcpp::traits::input_parameter< const double >::type vy(vySEXP);
    Rcpp::traits::input_parameter< const double >::type vh(vhSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type landIntersect(landIntersectSEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    rcpp_result_gen = Rcpp::wrap(boose_cpp(r, rmw, msw, pc, poci, x, y, vx, vy, vh, landIntersect, lat));
    return rcpp_result_gen;
END_RCPP
}
// computeAsymmetry_cpp
Rcpp::List computeAsymmetry_cpp(const Rcpp::String asymmetry, const Rcpp::NumericVector wind, const Rcpp::NumericVector x, const Rcpp::NumericVector y, const double vx, const double vy, const double vh, const Rcpp::NumericVector r, const double rmw, const double lat);
RcppExport SEXP _StormR_computeAsymmetry_cpp(SEXP asymmetrySEXP, SEXP windSEXP, SEXP xSEXP, SEXP ySEXP, SEXP vxSEXP, SEXP vySEXP, SEXP vhSEXP, SEXP rSEXP, SEXP rmwSEXP, SEXP latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::String >::type asymmetry(asymmetrySEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type wind(windSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type vx(vxSEXP);
    Rcpp::traits::input_parameter< const double >::type vy(vySEXP);
    Rcpp::traits::input_parameter< const double >::type vh(vhSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< const double >::type rmw(rmwSEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    rcpp_result_gen = Rcpp::wrap(computeAsymmetry_cpp(asymmetry, wind, x, y, vx, vy, vh, r, rmw, lat));
    return rcpp_result_gen;
END_RCPP
}
// computeDirectionBoose_cpp
Rcpp::NumericVector computeDirectionBoose_cpp(const Rcpp::NumericVector x, const Rcpp::NumericVector y, const double lat, const Rcpp::NumericVector landIntersect);
RcppExport SEXP _StormR_computeDirectionBoose_cpp(SEXP xSEXP, SEXP ySEXP, SEXP latSEXP, SEXP landIntersectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type landIntersect(landIntersectSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDirectionBoose_cpp(x, y, lat, landIntersect));
    return rcpp_result_gen;
END_RCPP
}
// computeDirection_cpp
Rcpp::NumericVector computeDirection_cpp(const Rcpp::NumericVector x, const Rcpp::NumericVector y, const double lat);
RcppExport SEXP _StormR_computeDirection_cpp(SEXP xSEXP, SEXP ySEXP, SEXP latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lat(latSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDirection_cpp(x, y, lat));
    return rcpp_result_gen;
END_RCPP
}
// computePDI_cpp
Rcpp::NumericVector computePDI_cpp(const Rcpp::NumericVector wind, const double tempRes);
RcppExport SEXP _StormR_computePDI_cpp(SEXP windSEXP, SEXP tempResSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type wind(windSEXP);
    Rcpp::traits::input_parameter< const double >::type tempRes(tempResSEXP);
    rcpp_result_gen = Rcpp::wrap(computePDI_cpp(wind, tempRes));
    return rcpp_result_gen;
END_RCPP
}
// computeExposure_cpp
Rcpp::NumericVector computeExposure_cpp(const Rcpp::NumericVector wind, const double tempRes, const Rcpp::NumericVector threshold);
RcppExport SEXP _StormR_computeExposure_cpp(SEXP windSEXP, SEXP tempResSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type wind(windSEXP);
    Rcpp::traits::input_parameter< const double >::type tempRes(tempResSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(computeExposure_cpp(wind, tempRes, threshold));
    return rcpp_result_gen;
END_RCPP
}
// willoughby_cppa
arma::vec willoughby_cppa(const arma::vec& r, double rmw, double msw, double lat);
RcppExport SEXP _StormR_willoughby_cppa(SEXP rSEXP, SEXP rmwSEXP, SEXP mswSEXP, SEXP latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type rmw(rmwSEXP);
    Rcpp::traits::input_parameter< double >::type msw(mswSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    rcpp_result_gen = Rcpp::wrap(willoughby_cppa(r, rmw, msw, lat));
    return rcpp_result_gen;
END_RCPP
}
// boose_cppa
arma::vec boose_cppa(const arma::vec& r, double rmw, double msw, double pc, double poci, const arma::vec& x, const arma::vec& y, const arma::vec& vx, const arma::vec& vy, double vh, const arma::uvec& landIntersect, double lat);
RcppExport SEXP _StormR_boose_cppa(SEXP rSEXP, SEXP rmwSEXP, SEXP mswSEXP, SEXP pcSEXP, SEXP pociSEXP, SEXP xSEXP, SEXP ySEXP, SEXP vxSEXP, SEXP vySEXP, SEXP vhSEXP, SEXP landIntersectSEXP, SEXP latSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type rmw(rmwSEXP);
    Rcpp::traits::input_parameter< double >::type msw(mswSEXP);
    Rcpp::traits::input_parameter< double >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< double >::type poci(pociSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vx(vxSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vy(vySEXP);
    Rcpp::traits::input_parameter< double >::type vh(vhSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type landIntersect(landIntersectSEXP);
    Rcpp::traits::input_parameter< double >::type lat(latSEXP);
    rcpp_result_gen = Rcpp::wrap(boose_cppa(r, rmw, msw, pc, poci, x, y, vx, vy, vh, landIntersect, lat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StormR_willoughby_cpp", (DL_FUNC) &_StormR_willoughby_cpp, 4},
    {"_StormR_holland_cpp", (DL_FUNC) &_StormR_holland_cpp, 6},
    {"_StormR_boose_cpp", (DL_FUNC) &_StormR_boose_cpp, 12},
    {"_StormR_computeAsymmetry_cpp", (DL_FUNC) &_StormR_computeAsymmetry_cpp, 10},
    {"_StormR_computeDirectionBoose_cpp", (DL_FUNC) &_StormR_computeDirectionBoose_cpp, 4},
    {"_StormR_computeDirection_cpp", (DL_FUNC) &_StormR_computeDirection_cpp, 3},
    {"_StormR_computePDI_cpp", (DL_FUNC) &_StormR_computePDI_cpp, 2},
    {"_StormR_computeExposure_cpp", (DL_FUNC) &_StormR_computeExposure_cpp, 3},
    {"_StormR_willoughby_cppa", (DL_FUNC) &_StormR_willoughby_cppa, 4},
    {"_StormR_boose_cppa", (DL_FUNC) &_StormR_boose_cppa, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_StormR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
